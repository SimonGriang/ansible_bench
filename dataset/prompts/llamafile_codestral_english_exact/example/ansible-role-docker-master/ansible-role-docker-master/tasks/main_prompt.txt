You are a professional developer. Below you will receive task descriptions from which you should generate an Ansible Playbook. Name the tasks exactly as I provide them here:

Task 1: Load OS-specific variables
Description Task 1: Load variables that are specific to the operating system (OS) being used. This is done by checking for OS-specific variable files in the 'vars' directory and falling back to a default 'main.yml' file if no match is found.

Task 2: Include RedHat setup tasks
Description Task 2: Include tasks specific to the RedHat OS family. This is done by including the 'setup-RedHat.yml' file if the OS family is RedHat.

Task 3: Include Debian setup tasks
Description Task 3: Include tasks specific to the Debian OS family. This is done by including the 'setup-Debian.yml' file if the OS family is Debian.

Task 4: Install Docker packages
Description Task 4: Install Docker packages. This is done using the 'package' module with the 'docker_packages' variable. If the Ansible version is less than 2.12 or the OS family is not RedHat or Debian, errors are ignored during the task.

Task 5: Install Docker packages with downgrade option
Description Task 5: Install Docker packages with the 'allow_downgrade' option set to true. This is done using the 'package' module with the 'docker_packages' variable. This task is only executed if the Ansible version is 2.12 or higher and the OS family is RedHat or Debian.

Task 6: Install docker-compose plugin
Description Task 6: Install the docker-compose plugin. This is done using the 'package' module with the 'docker_compose_package' variable. This task is only executed if 'docker_install_compose_plugin' is true and the Ansible version is less than 2.12 or the OS family is not RedHat or Debian.

Task 7: Install docker-compose-plugin with downgrade option
Description Task 7: Install the docker-compose plugin with the 'allow_downgrade' option set to true. This is done using the 'package' module with the 'docker_compose_package' variable. This task is only executed if 'docker_install_compose_plugin' is true, the Ansible version is 2.12 or higher, and the OS family is RedHat or Debian.

Task 8: Ensure /etc/docker/ directory exists
Description Task 8: Ensure that the '/etc/docker/' directory exists. This is done using the 'file' module. This task is only executed if there are Docker daemon options to configure.

Task 9: Configure Docker daemon options
Description Task 9: Configure Docker daemon options by copying the 'docker_daemon_options' variable to '/etc/docker/daemon.json'. This task is only executed if there are Docker daemon options to configure.

Task 10: Ensure Docker is started and enabled at boot
Description Task 10: Ensure that Docker is started and enabled at boot. This is done using the 'service' module with the 'docker' service. This task is only executed if 'docker_service_manage' is true.

Task 11: Ensure handlers are notified now
Description Task 11: Ensure that handlers are notified now to avoid firewall conflicts. This is done using the 'meta' module with the 'flush_handlers' argument.

Task 12: Include docker-compose tasks
Description Task 12: Include tasks specific to docker-compose. This is done by including the 'docker-compose.yml' file if 'docker_install_compose' is true.

Task 13: Get docker group info
Description Task 13: Get docker group info using the 'getent' module. This task is only executed if there are users to add to the docker group.

Task 14: Check if there are any users to add to the docker group
Description Task 14: Check if there are any users to add to the docker group. This is done by setting a fact 'at_least_one_user_to_modify' if there are users to add to the docker group.

Task 15: Include docker-users tasks
Description Task 15: Include tasks specific to adding users to the docker group. This is done by including the 'docker-users.yml' file if there are users to add to the docker group.
